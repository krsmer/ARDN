// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// User roles enum
enum UserRole {
  SUPER_ADMIN
  ORGANIZATION_ADMIN
  TEACHER
  VIEWER
}

// Recurrence types for activities
enum RecurrenceType {
  DAILY
  WEEKLY
  MONTHLY
}

// Organization model for multi-tenancy
model Organization {
  id          String   @id @default(cuid())
  name        String   // "Ankara Erkek Öğrenci Yurdu"
  slug        String   @unique // "ankara-erkek-yurdu"
  address     String?
  phone       String?
  email       String?
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations - all data belongs to organization
  users       User[]
  programs    Program[]
  students    Student[]
  activities  Activity[]

  @@map("organizations")
}

// User management
model User {
  id             String       @id @default(cuid())
  email          String       @unique
  passwordHash   String       @map("password_hash")
  name           String
  role           UserRole     @default(TEACHER)
  organizationId String       @map("organization_id")
  isActive       Boolean      @default(true) @map("is_active")
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @updatedAt @map("updated_at")

  // Relations
  organization           Organization      @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  createdPrograms        Program[]         @relation("ProgramCreator")
  teacherPrograms        TeacherProgram[]
  createdActivities      Activity[]        @relation("ActivityCreator")
  recordedParticipations Participation[]   @relation("ParticipationRecorder")
  pointAdjustments       PointAdjustment[] @relation("PointAdjustmentCreator")

  @@map("users")
}

// Program/semester management
model Program {
  id             String   @id @default(cuid())
  name           String
  description    String?
  startDate      DateTime @map("start_date")
  endDate        DateTime @map("end_date")
  organizationId String   @map("organization_id")
  isActive       Boolean  @default(true) @map("is_active")
  createdById    String   @map("created_by")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  // Relations
  organization    Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  createdBy       User             @relation("ProgramCreator", fields: [createdById], references: [id])
  teacherPrograms TeacherProgram[]
  students        Student[]
  activities      Activity[]

  @@map("programs")
}

// Teacher-Program relationship
model TeacherProgram {
  id         String   @id @default(cuid())
  userId     String   @map("user_id")
  programId  String   @map("program_id")
  assignedAt DateTime @default(now()) @map("assigned_at")

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  program Program @relation(fields: [programId], references: [id], onDelete: Cascade)

  @@unique([userId, programId])
  @@map("teacher_programs")
}

// Student management
model Student {
  id             String   @id @default(cuid())
  studentNumber  String   @map("student_number")
  name           String
  class          String
  organizationId String   @map("organization_id")
  programId      String   @map("program_id")
  photoUrl       String?  @map("photo_url")
  totalPoints    Int      @default(0) @map("total_points")
  isActive       Boolean  @default(true) @map("is_active")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  // Relations
  organization     Organization      @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  program          Program           @relation(fields: [programId], references: [id], onDelete: Cascade)
  participations   Participation[]
  pointAdjustments PointAdjustment[]

  // Unique constraint per organization
  @@unique([studentNumber, organizationId])
  @@map("students")
}

// Activity management
model Activity {
  id             String          @id @default(cuid())
  title          String
  description    String?
  activityDate   DateTime        @map("activity_date")
  startTime      DateTime        @map("start_time")
  endTime        DateTime?       @map("end_time")
  points         Int             // 1-100 ARDN points
  maxParticipants Int?           @map("max_participants")
  organizationId String          @map("organization_id")
  programId      String          @map("program_id")
  createdById    String          @map("created_by")
  isRecurring    Boolean         @default(false) @map("is_recurring")
  recurrenceType RecurrenceType? @map("recurrence_type")
  isActive       Boolean         @default(true) @map("is_active")
  createdAt      DateTime        @default(now()) @map("created_at")
  updatedAt      DateTime        @updatedAt @map("updated_at")

  // Relations
  organization   Organization    @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  program        Program         @relation(fields: [programId], references: [id], onDelete: Cascade)
  createdBy      User            @relation("ActivityCreator", fields: [createdById], references: [id])
  participations Participation[]

  @@map("activities")
}

// Participation records
model Participation {
  id             String   @id @default(cuid())
  studentId      String   @map("student_id")
  activityId     String   @map("activity_id")
  participatedAt DateTime @map("participated_at")
  pointsEarned   Int      @map("points_earned")
  isLate         Boolean  @default(false) @map("is_late")
  notes          String?
  recordedById   String   @map("recorded_by")
  createdAt      DateTime @default(now()) @map("created_at")

  // Relations
  student    Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  activity   Activity @relation(fields: [activityId], references: [id], onDelete: Cascade)
  recordedBy User     @relation("ParticipationRecorder", fields: [recordedById], references: [id])

  @@unique([studentId, activityId])
  @@map("participations")
}

// Bonus/penalty points
model PointAdjustment {
  id          String   @id @default(cuid())
  studentId   String   @map("student_id")
  points      Int      // can be negative
  reason      String
  createdById String   @map("created_by")
  createdAt   DateTime @default(now()) @map("created_at")

  // Relations
  student   Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
  createdBy User    @relation("PointAdjustmentCreator", fields: [createdById], references: [id])

  @@map("point_adjustments")
}